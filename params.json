{"name":"Configurator","tagline":"Configuration management utility","body":"#Configurator#\r\n\r\n##Overview##\r\n\r\n**Configurator** is a configuration management utility. It is written in Python and provides a Tk GUI at the moment.\r\n\r\nThe idea is to define configuration schemas and get a proper way of:\r\n\r\n- Sharing and versioning your project’s configuration schemas, but not your configurations. That way, you avoid overwriting configurations from different developers. Each developer has his own configurations that need to match the configuration schemas in the project. Whenever a project’s configuration schema changes, each developer is reponsible of updating his configurations to match the new schemas.\r\n- Being able to define configuration schemas from the GUI, with no need for programming for most cases.\r\n- Provide configurations documentation and validation.\r\n- Edit configurations from a GUI.\r\n- Define your own option configurations types and provide validation for them. \r\n\r\n##Running##\r\n\r\nConfigurator is run invoking configurator command from the command line. By default, it runs in normal mode; that means, it opens a GUI for adding, removing and editing configurations.\r\n\r\nA configurations schemas files is required. By default, Configurator looks for configurator.schema in the current directory. It shows and errors if it can not find it. A different file or location can be specified through the –schemas SCHEMAS option.\r\n\r\nIf the schemas file is found, then it is parsed and loaded. The schemas file is in XML format.\r\n\r\nApart from that, Configurator maintains configurations in another file, which by default is configurator.config. It can be specified to be something else through the –configs CONFIGS option. \r\n\r\nConfigurator can be run in three different modes fundamentally.\r\n\r\n- **Normal mode**: this mode is invoked running configurator with no special arguments from the command line (apart from the schema and configs arguments). In this mode, the standard configuration navigation UI is opened. This UI si meant for end users. The user can create, remove and edit his configurations from here. He doesn’t need to know how to build a configuration schema (although that is not difficult at all, as we will see.) Apart from that, when editing the configuration, the user gets a (hopefully) decent UI with custom option editors depending on the type of options and validation.\r\n\r\n    This is an example of Configurator running in normal mode: \r\n\r\n![configs](https://raw.github.com/mmontone/configurator/master/doc/images/configurator1.png)\r\n\r\n- **Setup mode**: this mode is invoked running configurator with the –setup option from the command line. In this mode, the configuration schemas navigator UI is opened. The developer can create, remove and edit configuration schemas from here. Configuration schemas are descriptions of how configurations should be, with nested sections and different type of options. He can build the application specific configuration schemas from here.\r\n\r\n    This is an example of Configurator running in setup mode: \r\n\r\n![schemas](https://raw.github.com/mmontone/configurator/master/doc/images/schemas1.png)\r\n\r\n- **Full mode:** this mode is invoked running configurator with the –full option from the command line. In this mode, both the configurations navigator and the configurations schemas navigator are available in two different tabs.\r\n\r\n   This is an example of Configurator running in full mode: \r\n\r\n![full](https://raw.github.com/mmontone/configurator/master/doc/images/full.png)\r\n\r\n###Command line summary:###\r\n\r\n    $> configurator -h\r\n\r\n    usage: configurator.py [-h] [-f] [-s SCHEMAS] [-c CONFIGS] [--setup] [--debug]\r\n\r\n    Configurator. Configuration management utility.\r\n\r\n    optional arguments:\r\n       -h, --help            show this help message and exit\r\n       -f, --full            Run the full configurator (both configurations and\r\n                             schemas navigation)\r\n       -s SCHEMAS, --schemas SCHEMAS\r\n                             The configuration schemas files. Default is\r\n                             configurator.schema\r\n       -c CONFIGS, --configs CONFIGS\r\n                             The configurations file. Default is\r\n                             configurator.config\r\n       --setup               Edit configuration schemas\r\n       --debug               Run in debug mode","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}