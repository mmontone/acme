\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename acme.info
@settitle Acme - An Application Configuration ManagEr

@set VERSION 0.1
@set DATE January 2013

@c Version and Contact Info
@set MAINTAINERSITE @uref{https://github.com/mmontone, maintainers webpage}
@set AUTHOR Mariano Montone
@set MAINTAINER Mariano Montone
@set MAINTAINEREMAIL @email{marianomontone at gmail dot com}
@set MAINTAINERCONTACT @uref{mailto:marianomontone at gmail dot com,contact the maintainer}
@c %**end of header

@ifinfo
@format
START-INFO-DIR-ENTRY
* Acme: (acme.info). An Application Configuration ManagEr
END-INFO-DIR-ENTRY
@end format
@end ifinfo

@c Subheadings inside a table.
@macro tsubheading{text}
@ifinfo
@subsubheading \text\
@end ifinfo
@ifnotinfo
@item @b{\text\}
@end ifnotinfo
@end macro

@copying

This manual is for Acme version @value{VERSION}.

Copyright @copyright{} 2013 Mariano Montone

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.  Buying copies from the FSF supports it in
developing GNU and promoting software freedom.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.
@end quotation
@end copying

@titlepage
@title Acme
@subtitle A configuration management utility
@subtitle User manual
@subtitle Release @value{VERSION}
@author by Mariano Montone

@c Output the table of contents at the beginning.
@contents

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@ifnottex
@node Top
@top Acme - An Application Configuration ManagEr

This is Acme library documentation

@end ifnottex

@menu
* Introduction::                        What is Acme?
* Overview::                            Acme overview
* Running::                             Running    
* Configuration schemas::               What configuration schemas are and how to define them
* Configurations::                      What configurations are and how to define them
* Examples::                            Some examples
* Frontend::                            Acme frontend
* Custom option types::                 How to define custom option types
* Language bindings::                   Language bindings
* System reference::                    The system reference
* References::                          Related work
* Index::                               Complete index.

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Summary::                     A brief summary of what Acme is
* Installation::                How to install Acme
* Feedback::                    Bug reports, ideas, patches etc.
* Conventions::                 Type-setting conventions in the manual

Overview

Running

* Running overview::            Running overview
* Running modes::               Running modes
* Command line summary::        Command line summary

Configuration schemas

Configurations

Examples

* Use cases::                           Typical use cases

Frontend

Custom option types

Language bindings

System References

References

Index

@end detailmenu
@end menu

@node Introduction
@chapter Introduction
@cindex introduction

Acme is an Application Configuration ManagEr.

You can get a copy and this manual at @url{http://mmontone.github.io/acme}

@menu
* Summary::                     A brief summary of what Acme is
* Installation::                How to install Acme
* Feedback::                    Bug reports, ideas, patches etc.
* Conventions::                 Type-setting conventions in the manual
@end menu

@node Summary
@section Summary
@cindex summary

Acme is an Application Configuration ManagEr

@node Installation
@section Installation
@cindex installation

Download Acme, or clone the git repository from @url{https://github.com/mmontone/acme}. Then run sudo @verb{|sudo python ./setup.py install|}. That installs acme the acme binary on @verb{|/usr/local/bin|}. After that, you can run acme typing @verb{|acme|} at the shell.

@node Feedback
@section Feedback
@cindex feedback

Mail marianomontone at gmail dot com with feedback

@node Conventions
@section Conventions
@cindex conventions

Hear are some coding conventions we'd like to follow

@itemize @bullet

@item
We @emph{do} believe in documentation. Document your variables, functions, macros and classes. Besides, provide a documentation from a wider perspective. Provide diagrams and arquitecture documentation; examples and tutorials, too. Consider using an automatic documentation generator (see the bitacora package in the dependencies).

@item
We don't want functions to be shorter than the should nor longer than they should. There is no "every function should have at most ten lines of code" rule. We think that coding is like literature to a great extent. So you should strive for beauty and clarity. 

@end itemize

@node Overview
@chapter Overview
@cindex overview 

Acme is an Application Configuration ManagEr. It is written in Python and provides a Tk GUI at the moment.

The idea is to define configuration schemas and get a proper way of:

@itemize @bullet
@item
Sharing and versioning your project's configuration schemas, but not your configurations. That way, you avoid overwriting configurations from different developers. Each developer has his own configurations that need to match the configuration schemas in the project. Whenever a project's configuration schema changes, each developer is reponsible of updating his configurations to match the new schemas.

@item
Being able to define configuration schemas from the GUI, with no need for programming for most cases.

@item
Provide configurations documentation and validation.

@item
Edit configurations from a GUI.

@item
Define your own option configurations types and provide validation for them.

@end itemize

@node Running
@chapter Running
@cindex running

@menu
* Running overview::            Running overview
* Running modes::               Running modes
* Command line summary::        Command line summary
@end menu

@node Running overview
@section Running overview
@cindex running

Acme is run invoking @emph{acme} command from the command line. By default, it runs in normal mode; that means, it opens a GUI for adding, removing and editing configurations.

A configurations schemas files is required. By default, Acme looks for @emph{acme.schema} in the current directory. It shows and errors if it can not find it. A different file or location can be specified through the @emph{--schemas SCHEMAS} option.

If the schemas file is found, then it is parsed and loaded. The schemas file is in XML format.

Apart from that, Acme maintains configurations in another file, which by default is @emph{acme.config}. It can be specified to be something else through the @emph{--configs CONFIGS} option.

@node Running modes
@section Running modes

Acme can be run in three different modes fundamentally.

@itemize
@item
@emph{Normal mode}: this mode is invoked running acme with no special arguments from the command line (apart from the schema and configs arguments). In this mode, the standard configuration navigation UI is opened. This UI si meant for end users. The user can create, remove and edit his configurations from here. He doesn't need to know how to build a configuration schema (although that is not difficult at all, as we will see.) Apart from that, when editing the configuration, the user gets a (hopefully) decent UI with custom option editors depending on the type of options and validation.

This is an example of Acme running in normal mode:

@image{images/acme1, 6in}

@item
@emph{Setup mode}: this mode is invoked running acme with the @emph{--setup} option from the command line. In this mode, the configuration schemas navigator UI is opened. The developer can create, remove and edit configuration schemas from here. Configuration schemas are descriptions of how configurations should be, with nested sections and different type of options. He can build the application specific configuration schemas from here.

This is an example of Acme running in setup mode:

@image{images/schemas1, 6in}

@item
@emph{Full mode}: this mode is invoked running acme with the @emph{--full} option from the command line. In this mode, both the configurations navigator and the configurations schemas navigator are available in two different tabs.

This is an example of Acme running in full mode:

@image{images/full, 6in}

@end itemize

@node Command line summary
@section Command line summary

@verbatim

$> acme -h

usage: acme [-h] [-f] [-s SCHEMAS] [-c CONFIGS] [-l]
                    [-i INSPECT_CONFIG] [-g GET] [--set SET] [--config CONFIG]
                    [--validation VALIDATION] [--validate VALIDATE]
                    [--validate-all] [--json] [--setup] [--debug DEBUG]

Acme. Application Configuration ManagEr.

optional arguments:
  -h, --help            show this help message and exit
  -f, --full            Run the full acme (both configurations and
                        schemas navigation)
  -s SCHEMAS, --schemas SCHEMAS
                        The configuration schemas files. Default is
                        acme.schema
  -c CONFIGS, --configs CONFIGS
                        The configurations file. Default is
                        acme.config
  -l, --list-configs    List configurations
  -i INSPECT_CONFIG, --inspect-config INSPECT_CONFIG
                        Inspect a configuration. A CSV(Comma separated values)
                        list with <option path>, <value>, <option type>,
                        <origin>
  -g GET, --get GET     Get an option value
  --set SET             Set an option value
  --config CONFIG       Edit a specific configuration
  --validation VALIDATION
                        Enable or disable configurations validation
  --validate VALIDATE   Validate a configuration. Pass the configuration name
  --validate-all        Validate all configurations
  --json                Use JSON for communication
  --setup               Edit configuration schemas
  --debug DEBUG         Run in debug mode. Provide the debugging level, one of
                        DEBUG or INFO
@end verbatim

@node Configuration schemas
@chapter Configuration schemas
@cindex configuration schema

@menu
* Schema sections::             Configuration schema sections
* Schema options::              Configuration schema options
* Built-in option types::       The built-in option types
@end menu


Configuration schemas define the configurations structure. They have a name, a list of parents, and a list of sections with options definitions.

@image{images/newschema, 6in}

Configuration schemas can be composed by inheriting from multiple parents. Configuration sections from the parents appear in the child configuration schema. For instance, a full stack web framework configuration schema could inherit from a generic Web schema for web server configuration, and another Database schema for database connection configuration.

Configuration schemas have sections, each containing other sections and schema options. The schemas sections and options can be manipulated in the tree appearing on the left of the configuration schemas navigator.

@image{images/schemas_navigation, 6in}

@node Schema sections
@section Schema sections
@cindex section

Each configuration schema section has a name, a documentation, subsections and a list of option schemas. Sections, subsections, and sections' options can all be added and removed from the tree widget on the left of the schemas navigator.

@node Schema options
@section Schema options
@cindex option

@menu
* Options dependencies::                Options dependencies
@end menu

Options in schemas have a name and a type. 

@image{images/schema_option, 6in}

The type of option determines the possible values that can be assigned to it in configurations. The option type can be String, Number, Boolean, Email, URI, Filename, Directory, Color, Timezone, Language, Country, Currency, Date, Time, Datetime, etc. Some of them will be described later. When editing configurations, each option is edited with its corresponding editor, depending on the type of option. For instance, options of type Date are edited using a calendar.

@image{images/option_editing, 6in}

Apart from name and type, schema options specify if it required for the option to be assigned a value in the configuration. Also, they can have a default value in case the user doesn't assign one in the configuration. 

They also have a documentation string. This is very important for the end user to know the option meaning.

@node Options dependencies
@subsection Options dependencies
@cindex dependency

It often happens that some options only make sense when some others are set to certain values. For instance, if we are configuring a database, then specific database engine options should only be available when the the specific engine is selected. Or a list of options make sense only when a boolean option is enabled.

Acme has support for that by attaching a dependencies expression to an option schema. The dependency expression is written in a very simple domain specific language. They are basically boolean expressions, with options being referenced. 

Example: MySQL supports two storage engines, MyISAM and InnoDB, but this option only makes sense for MySQL. To specify that, we can use the following dependencies expression: @verb{|Database.Engine = 'MySQL'|}. This way the @verb{|Storage engine|} option will only be editable when the Database.Engine is set to 'MySQL'.

Dependency expressions can be added in the schema option editing screen:

@image{images/dependencies, 6in}

@node Built-in option types
@section Built-in option types
@cindex option type

@menu
* String::                         The String option type
* Number::                         The Number option type
* Boolean::                        The Boolean option type
* Email::                          The Email option type
* Url::                            The URL option type
* Filename::                       The Filename option type
* Choice::                         The Choice option type
* List::                           The List option type
@end menu

@node String
@subsection String
@cindex string

The String option type ensures that the the option value is of type string.

@c Example:

@c @example
@c (:username "Username" :text :documentation "The database engine username")
@c (:password "Password" :text :documentation "The database engine password")
@c @end example

@node Number
@subsection Number
@cindex number

The Number option type ensures that the the option value is of type Number.

@c Example:

@c @example
@c (:port "Port" :integer :documentation "Web application port")
@c @end example

@node Boolean
@subsection Boolean
@cindex boolean

The boolean option type ensures that the the option value is of type boolean (True or False).

@c Example:

@c @example
@c (:catch-errors-p "Catch errors?" :boolean :documentation "Whether to handle application errors")
@c @end example

@node Email
@subsection Email
@cindex email

The email option type ensures that the the option value is a valid email string.

@c Example:

@c @example
@c (:port "Email" :email :documentation "User email")
@c @end example

@node Url
@subsection Url
@cindex url

The url option ensures that the the option value is a valid url.
@c The option value is converted to a url (cl-url) if it is a string, or left unmodified if already a url.

@c Example:

@c @example
@c (:host "Host" :url :documentation "The web application host")
@c @end example

@node Filename
@subsection Filename
@cindex filename

The pathaname option type ensures that the the option value is a valid pathname and the file or directory exists.

@c The option value is converted to a pathname if it is a string, or left unmodified if already a pathname.

@c Example:

@c @example
@c (:stylesheet "Stylesheet" :pathname :documentation "The stylesheet file")
@c @end example

@node Choice
@subsection Choice
@cindex choice

The Choice option type ensures that the option value is one of the options listed.

@c Example:

@c @example
@c (:connection-type "Connection type"
@c       (:one-of (:socket "Socket")
@c 	       (:tcp "TCP")))
@c @end example

@node List
@subsection List
@cindex list

The @emph{List} option type ensures that the option value is a subset of the options listed. 

@c Example:

@c @example
@c (:debugging-levels "Debugging levels" (:list (:info "Info")
@c 					     (:warning "Warning")
@c 					     (:profile "Profile")))
@c @end example

@node Configurations
@chapter Configurations

Configurations are instances of Configuration schemas, much like objects are instances of classes in object oriented programming languages. That is, configurations structure is determined by the configuration schema they belong to. In particular, their sections are that of their configuration schemas; and their options values depend on the option schemas defined in the configruration schemas.

Configurations belong to one and only one configuration schema, and that's compulsory, as it can be expected. Besides, configurations can inherit from each other: a configuration can inherit from another configuration and overwrite its parent options values. A configuration can have one and only one parent, o no parent; this is different from configuration schemas, that can have several parents. An understandable restriction is that the configuration parent schema has to be the same that the configuration schema.

Configurations can be added and removed from the list appering on the left of the configurations navigator.

@image{images/acme1, 6in}

Configurations can be loaded and saved. They are serialized in XML format. The default filename is @verb{|acme.config|}, but it can be changed if desired.

Configuration options editing happens on the right panel of the configurations navigator. A specific option editor is offered for each type of option, and each option documentation is displayed too. When trying to save a configuration section, it is ensured that required options (options declared with @verb{|required|} enabled in the configuration schema) are filled. Options that are not currently set have their default value, if any. Also, options can be @verb{|set|} and @verb{|unset|}. Setting a configuration option means setting the configuration option in the current configuration to the value being shown in the option editor. Unsetting a configuration option means removing the option value setting from the current configuration.

@node Examples
@chapter Examples
@cindex examples

@menu
* Use cases::                           Typical use cases
@end menu

Schemas definitions:

@example
<schemas>
  <schema name="Web">
    <documentation></documentation>
    <section name="Web server">
      <documentation></documentation>
      <option name="Host">
        <documentation>Server host</documentation>
        <type name="String"/>
        <required>True</required>
        <default>http://localhost</default>
      </option>
      <option name="Port">
        <documentation>Port number</documentation>
        <type name="Number"/>
        <required>True</required>
        <default>8080</default>
      </option>
    </section>
    <section name="Authentication">
      <documentation></documentation>
      <option name="Authentication enabled">
        <documentation>Enable authentication?</documentation>
        <type name="Boolean"/>
        <required>False</required>
      </option>
    </section>
    <section name="General preferences">
      <documentation></documentation>
      <option name="Font size">
        <documentation>Font size</documentation>
        <type name="Number"/>
        <required>True</required>
      </option>
      <section name="Colors">
        <documentation></documentation>
        <option name="Background color">
          <documentation>Background color</documentation>
          <type name="Color"/>
          <required>True</required>
        </option>
      </section>
    </section>
  </schema>
  <schema name="App">
    <documentation></documentation>
    <parent name="Database"/>
    <parent name="Web"/>
    <parent name="Log"/>
  </schema>
  <schema name="Log">
    <documentation></documentation>
    <section name="Logging">
      <documentation></documentation>
      <option name="Logfile">
        <documentation>Where the logging happens</documentation>
        <type name="Filename"/>
        <required>True</required>
      </option>
      <option name="Expire">
        <documentation>Expiration</documentation>
        <type name="Datetime"/>
        <required>True</required>
      </option>
    </section>
  </schema>
  <schema name="Database">
    <documentation></documentation>
    <section name="Database server">
      <documentation></documentation>
      <option name="engine">
        <documentation>The database engine</documentation>
        <type name="Choice">
          <option value="Postgresql"/>
          <option value="Mysql"/>
        </type>
        <required>True</required>
      </option>
    </section>
  </schema>
</schemas>
@end example

Configurations definitions:

@example
<configurations>
  <configuration name="Dev">
    <schema name="App"/>
    <option path="Database.Database server.engine" value="Postgresql"/>
  </configuration>
  <configuration name="Test">
    <schema name="App"/>
    <parent name="Dev"/>
    <option path="Database.Database server.engine" value="Mysql"/>
  </configuration>
  <configuration name="Prod">
    <schema name="Web"/>
    <option path="Web.Authentication.Authentication enabled" value="True"/>
    <option path="Web.General preferences.Colors.Background color" value="#6ed9d9"/>
  </configuration>
</configurations>
@end example

@node Use cases
@section Use cases

@menu
* Debugging::          Example of application debugging configuration
* Logging::            Example of application logging configuration
* Testing::            Example of application testing configuration
* Deployment::         Example of application deployment configuration
@end menu

@node Debugging
@subsection Debugging
@cindex debugging

@node Logging
@subsection Logging
@cindex logging

@node Testing
@subsection Testing
@cindex testing

@node Deployment
@subsection Deployment
@cindex deployment

@node Frontend
@chapter Frontend

Configurations can be edited from a Tk interface.

@node Custom option types
@chapter Custom option types

How to define custom option types

@node Language bindings
@chapter Language bindings

There are language bindings implemented for Python, PHP and Common Lisp for the moment.

Bindings can be found in the bindings directory. For how they are used, look at the tests in the corresponding directory.

In general, bindings ivoke acme from the command line using JSON for communication.

@node System reference
@chapter System reference

@c @include references.texinfo

@node References
@chapter References
@cindex reference

@node Index
@chapter Index
@menu
* Concept Index::          The concept index
* Class Index::            The classes index
* Function Index:: The functions and macros index
* Variable Index::         The variables index
@end menu

@node Concept Index
@section Concept Index

@printindex cp

@node Class Index
@section Class Index

@printindex tp

@node Function Index
@section Function Index
     
@printindex fn

@node Variable Index
@section Variable Index
     
@printindex vr

@bye
